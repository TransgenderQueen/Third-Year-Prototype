#include <iostream>
#include <vector>
#include <algorithm>

class Potion
{
public:
	std::string name;
	int healingValue;

	Potion(std::string n, int h) : name(n), healingValue(h) {}
};

class Player
{
public:
	std::string name;
	int currentHealth;
	int maxHealth;

	Player(std::string n, int current, int max) : name(n), currentHealth(current), maxHealth(max) {}
};

class HealthPotionSystem
{
public:
	std::vector<Potion> potions;

	HealthPotionSystem()
	{
		// Adding multiple potions
		potions.push_back(Potion("Small Potion", 10));
		potions.push_back(Potion("Medium Potion", 20));
		potions.push_back(Potion("Large Potion", 50));
		potions.push_back(Potion("Supreme Potion", 70));
	}

	void HealPlayers(std::vector<Player>& players)
	{
		for (auto& player : players)
		{
			int numofPotions = 0;
			int healthindex = 0;
			int healthNeeded = player.maxHealth - player.currentHealth;
			if (healthNeeded <= 0)

			{
				std::cout << player.name << " is already at max health!" << std::endl;
				continue;
			}

			// Sort potions by their healing value in descending order
			std::sort(potions.begin(), potions.end(), [](const Potion& p1, const Potion& p2) {
				return p1.healingValue > p2.healingValue;
			});

			std::cout << "Healing " << player.name << ": Current Health = " << player.currentHealth << ", Max Health = " << player.maxHealth << std::endl;

			// Implement your solution here to consume potions optimally based on healthNeeded for each player
			int size = potions.size();
			Potion lastIndex = potions[size - 1];
			int lowestHeal = lastIndex.healingValue;


			while (player.currentHealth <= player.maxHealth - lowestHeal)
			{
				std::cout << healthNeeded << std::endl;
				while (healthNeeded >= potions[healthindex].healingValue)
				{
					numofPotions++;
					healthNeeded = healthNeeded - potions[healthindex].healingValue;
					player.currentHealth = player.currentHealth + potions[healthindex].healingValue;

				}
				healthindex++;



			}

			std::cout << "Total number of potions for " << player.name << " is " << numofPotions << std::endl;



			if (player.currentHealth < player.maxHealth)
			{
				std::cout << "Not enough potions to fully heal " << player.name << "!" << std::endl;
				std::cout << "Current health is: " << player.currentHealth << std::endl;
			}
			else
			{
				std::cout << player.name << " is fully healed!" << std::endl;
			}
		}
	}
};

int main()
{
	// List of multiple players
	std::vector<Player> players = {
		Player("Druid", 10, 100),
		Player("Mage", 50, 100),
		Player("Knight", 70, 100),
		Player("Rogue", 65, 100),
		Player("Cleric", 85, 100)
	};

	HealthPotionSystem potionSystem;
	potionSystem.HealPlayers(players); // Heal all players optimally using available potions

	return 0;
};