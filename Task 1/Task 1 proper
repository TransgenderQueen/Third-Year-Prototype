#include <stdio.h>
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <functional>

class Item
{
public:
    std::string name;
    int value;
    Item(std::string n, int v) : name(n), value(v) {}
};

// Function to display the inventory
void DisplayInventory(const std::vector<Item>& items)
{
    for (const auto& item : items)
    {
        std::cout << item.name << ": " << item.value << std::endl;
    }
}


// Function to sort items by name (alphabetically)
void SortByName(std::vector<Item>& items, bool ascending = true){
    if (ascending)
        std::sort(items.begin(), items.end(), [](const Item& a, const Item& b) { return a.name < b.name; });
    else
        std::sort(items.begin(), items.end(), [](const Item& a, const Item& b) { return a.name > b.name; });
}

// Function to sort items by value (ascending/descending)
void SortByValue(std::vector<Item>& items, bool ascending = true) {
    if (ascending)
        std::sort(items.begin(), items.end(), [](const Item& a, const Item& b) { return a.value < b.value; });
    else
        std::sort(items.begin(), items.end(), [](const Item& a, const Item& b) { return a.value > b.value; });
}

// Function to add a new item to the inventory
void AddItem(std::vector<Item>& items) {
    std::string name;
    int value;

    std::cout << "Enter item name: ";
    std::getline(std::cin, name);
    std::cout << "Enter item value: ";
    std::cin >> value;
    std::cin.ignore(); // Clear the newline character from the input buffer

    items.emplace_back(name, value);
    std::cout << "Item added: " << name << " with value " << value << std::endl;
}


void bubbleSort(std::vector<Item>& items, bool (*compare)(const Item&, const Item&)) {
   size_t n = items.size();
    for (size_t i=0; i < n - 1; ++i) {
        for (size_t j = 0; j < n - 1; ++j) {
            if(compare(items[j], items[i + 1])) {
                std::swap(items[j], items[j + 1]);
            }
        }
    }
}

bool compareByNameGreater(const Item& a, const Item& b){
    return a.name > b.name;
}

bool compareByNameLess(const Item& a, const Item& b){
   return a.name < b.name;
}

bool compareByValueLess(const Item& a, const Item& b){
    return a.value < b.value;
}

bool compareByValueGreater(const Item& a, const Item& b){
    return a.value > b.value;
}



void printArray(const std::vector<Item>& items) {
    for (const Item& item : items) {
        std::cout << "items";
    }
}

int main()
{
    std::vector<Item> items = {
        Item("Sword", 150),
        Item("Potion", 50),
        Item("Shield", 100),
        Item("Bow", 120),
        Item("Helmet", 80),
        Item("Mithril Plate Armour", 2000)
    };
    
    
    // Add a new item
    AddItem(items);
    
    std::cout << "Original Inventory:" << std::endl;
    DisplayInventory(items);

    std::cout << "\nSorted by Name (Ascending):" << std::endl;
    SortByName(items, true); // Sort by name in ascending order
    DisplayInventory(items);
    
    std::cout << "\nSorted by Name (Descending):" << std::endl;
    SortByName(items, false); // Sort by name in ascending order
    DisplayInventory(items);

    std::cout << "\nSorted by Value (Descending):" << std::endl;
    SortByValue(items, false); // Sort by value in descending order
    DisplayInventory(items);

    std::cout << "\nSorted by Value (Ascending):" << std::endl;
    SortByValue(items, true); // Sort by value in ascending order
    DisplayInventory(items);


    
    return 0;
}